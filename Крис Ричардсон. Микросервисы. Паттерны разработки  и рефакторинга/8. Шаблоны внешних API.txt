Клиенты апи разнородных по скорости, объёмам потребляемыз данных и имеющимся у них правам доступа. 

Клиенты могут обращаться напрямую к сервисам, но это плохо:
- нужно несколько запросов к разным сервисам, тк данные раздроблены
- клиенты знают о сервисах, нарушение инкапсуляции - при изменении апи придётся менять клиент
- сервисы могут задействовать механизмы IPC, которые неудобно юзать на клиентской стороне, особенно за пределами брандмауэра

Вместо доступа напрямую к сервисам должен быть единый сервис - апи-шлюз (gateway), 
	который служит точкой входа в микросервисное приложение для клиентов внешнего апи. 
	Отвечает за маршрутизации, объединение апи, преобразование протоколов, аутентификацию и тд

Граничная функция - операция обработки запросов на границе приложения, напр, аутентификацию, авторизация, ограничение частоты запросов, 
	кэширование, сбор показателей, ведение журнала запросов. Эти задачи может выполнять апи-шлюз. 

Апи-шлюз имеет двухуровневую структуру - уровень апи и общий уровень. Апи состоит из модулей апи для каждого клиента. 
	На общем уровне реализуются общие возможности, включая граничные функции. 

Для разработки апи-шлюза можно или сформировать отдельную команду или отдать каждый апи модель на откуп клиентских разработчикам, 
	занимающимся каждый своим клиентом - веб, мобильным или другим. 

Возникает размывание ответственности. Решение - шаблон BFF (backend for frontends). Каждый апи модуль превращается в отдельный апи шлюз, 
	который разрабатывается и администрируется одной клиентской командой. 
	То BFF реализует отдельный апи шлюз для каждого типа клиентов. 

В идеале все апи шлюзы должны юзать один технологический стек, общие возможности - в разделяемой библиотеке 

Плюсы апи шлюза:
- инкапсуляция внутренней структуры 
- упрощение клиентского кода
- BFF упрощает масштабирования каждого апи

Минусы:
- дополнительный компонент, который надо разрабатывать, поддерживать и тд
- есть риск того, что апи шлюз будет тормозить разработку 

BFF подходит для большинства приложений. 

При проектировании апи шлюзов важно учесть следующие моменты:
- производительность и масштабируемость - выбор синхронной или асинхронной(неблокирующей) модели ввода-вывода. 
	Асинхронная лучше, но сложнее для разработки. 
- конкурентное выполнение запросов, если они не зависят друг от друга (промисы в жс) 
- обработка частичных отказов - запуск нескольких экземпляров за балансировщиком нагрузки или исп паттерна Предохранитель. 
- реализация шаблонов, общих для архитектуры приложения