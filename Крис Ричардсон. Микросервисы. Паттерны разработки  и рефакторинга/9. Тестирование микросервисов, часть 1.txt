Микросервисный подход требует написания автоматических тестов. 

Методики тестирования:
- автоматические тесты
- тестирование с помощью макетов (mocks) и заглушек (stubs). Заглушка возвращает значение тестируемой системе, 
	а макет используется тестом для того, чтобы проверить, что система корректно вызывает свои зависимости. 

Типы тестов:
- модульные, тестируют небольшую часть сервиса, напр, класс 
- интеграционные - проверяют взаимодействие инфраструктурных компонентов
- компонентный тесты - приемочные тесты для отдельного сервиса
- сквозные тесты - приемочные тесты для целого приложения 

Тестовый квадрант классификации тестов группирует тесты по двум основаниям: к чему относится тест - к бизнесу или технологиям, 
	какова цель теста - помочь с написанием кода или дать оценку приложению.

Квадрант определяет четыре категории тестов:
Q1 - помощь в программировании с ориентацией на технологии - модульные и интеграционные
Q2 - помощь в программировании с ориентацией на бизнес - компонентные и сквозные тесты 
Q3 - оценка приложения с точки зрения бизнеса - проверка использования и исследовательское ткстирование
Q4 - оценка приложения с точки зрения технологий - нефункционалтное приемочные тестирование, проверка производительности

Есть другие способы организации тестов, напр, пирамида тестов, которая показывает, сколько тестов какого типа следует писать 

Пирамида сверху вниз : сквозные - компонентные - интеграционные - модульные. Чем ниже, тем быстрее, надёжнее и дешевле, 
	чем выше - медленнее, хрупче и затратнее. 

С продвижением вверх по пирамиде мы должны писать все меньше тестов. 

В тестировании микросервисов межсервисное взаимодействие играет большую роль, тестить его сложно. 
	Можно воспользоваться тестирование тем контрактов с расчётом на потребителя. 
	Оно сосредоточен на проверке того, что апи провайдера по своей форме отвечает ожиданиям потребителя:
- имеет нужные хттп методы и пути
- принимает нужные заголовки, если нужно
- принимает тело запроса, если есть
- возвращает ответ с ожидаемым кодом состояния, заголовками и телом. 

Шаблон Тестирование контрактов на стороне потребителя - проверяет, может ли клиент взаимодействовать с сервисом. 

Модульный тест бывает:
- изолированный - тестирует отдельно взятый класс, заменяя его зависимости объектами-макетами
- общительный - тестирует класс и его зависимости

Классы контролёров и сервиса обычно тестируются изолированно, доменные объекты чаще всего тестируются с помощью общительных
	модульных тестов

Можно писать тесты с использованием базы, но такие тесты будут медленным, так что лучше использовать заглушки.