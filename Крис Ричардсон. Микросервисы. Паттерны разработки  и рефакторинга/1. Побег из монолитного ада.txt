- симптомы: big Ball of mud, устаревающие фреймворки, растущая сложность поддержки

- монолит это не плохо, важны нюансы

- плюсы: простота разработки, тестирования, развёртывания и масштабирования, но с ростом кодовой базы эти плюсы сходят на нет

- рост кодовой базы => рост команд(ы) => рост сложности (масштабирования и деплоя) => рост времени разработки

- модель масштабирования в виде куба, х - экземпляры, z - секции данных, y - функциональная декомпозиция на микросервисы

- по х - часто юзают для монолитов, по z - маршрутизируем, секционируя по экземплярам

- сервис - узкоспециализированное приложение, реализующее узко специализированные функции. 
	У сервиса могут быть несколько копий, те сервис тоже масштабируется по х или z. 

- круто, если каждому микросервису даётся своя база, это уменьшает связность

Микросервисы не то же, что сервис ориентированная архитектура. SOA это больше про монолиты. 
Микросервисы юзают простые протоколы и каналы связи, у них отдельные бд

Плюсы микросервисов: изолированность во всех аспектах - баги, разработка, данные, развёртывание, 
	масштабирования => непрерывная доставка быстрее 

Минусы микросервисов: система в общем становится сложнее, требуется большая координация, сложно подобрать набор сервисов

- распределеный монолит - набор связанных сервисов, которые надо развертывать вместе = ПЛОХО

- разбиение на сервис по бизнес-возможностям или по проблемным областям

- затраты на взаимодействие в команде размером N составляют O(N^2) => в команде не больше 8-12 человек, каждая работает над своим сервисом

- архитектура приложения отражает структуру организации, следуя закону Конвея => строим организацию на основе того, 
	как разбиты сервис => слабо связанные команды и лёгкая масштабируемость

- монолит обычно ок для простых приложений, микросервисы - для больших и сложных