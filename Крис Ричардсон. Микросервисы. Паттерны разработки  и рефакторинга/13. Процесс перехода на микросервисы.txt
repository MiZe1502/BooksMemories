Причины перехода на микросервисы:
- медленная доставка
- обновления с ошибками
- плохая масштабируемость 

Но сперва нужно убедиться, что нет других причин, стоящих за этими проблемами, а затем уже менять архитектуру и мигрировать. 

Модернизация ПО - это разновидность перевода устаревшего кода на новые архитектуру и стек технологий. 
	Переписывать с нуля нельзя, мы должны постепенно трансформировать монолит в микросервисы, строя удушающее приложение. 

Удушающее приложение (strangler app) - строится новое приложение вокруг старого кода, микросервисы, работающие в связке с монолитом. 
	Постепенно монолит становится все меньше, пока не исчезает. На это могу уйти годы, и монолит может полностью так и не исчезнуть, 
	но если он не препятствует разработке, то возможно его не стоит трогать. 

- нужно как можно чаще демонстрировать пользу от миграции
- минимизируем изменения, вносимые в монолит
- не нужно строить большую инфраструктуру развёртывания, пока не накопилось достаточно много сервисов

Стратегии перехода с монолита на микросервисы:
- реализация новых возможностей в виде сервисов
- разделение уровня представления и внутренних компонентов
- разбиение монолита путем оформления функциональности в виде сервисов

Для взаимодействия монолита и микросервисов нужно сделать интеграционный слой, который будет расположен и в монолите, и в микросервисах.

Можно дёргать апи монолита, а можно реплицировать часть данных в бд сервиса. Это лучше, тк не нужно запрашивать данные у провайдера 
	каждый раз. По сути, то cqrs представление. Минус - сложность обслуживания реплики и то, что монолит надо менять, 
	чтобы он публиковал доменные события.

При разделении монолита из-за разницы в доменных модалях нужно реализовать предохранительный слой (anti-corruption-layer), 
	программный слой, выступающий посредником между двумя доменными моделями, не давая им засорить друг друга своими концепциями.

При извлечении сервисов из монолита нужно тщательно планировать разделение, чтобы избежать необходимости компенсирующих транзакций 
	и использования повествований.

Вынося из монолита отдельные сервисы, часто извлекают в отдельный сервис весь вертикальный срез с контроллерами наверху 
	и таблицами базы данных внизу. 

При переходе к микросервисам нужно поддерживать два механизма безопасности - реализованный в монолите, основанный на сеансе в памяти, 
	и систему токенов из микросервисов. Можно модифицировать обработчик входа в систему для генерации куки с токеном безопасности, 
	а затем передавать этот токен сервисам. 

Переключатели возможностей (feature togglers) - позволяют развертывать обновления, не делая из доступными пользователям. 
	Позволяют динамически менять поведение приложения, развертывая новый код.