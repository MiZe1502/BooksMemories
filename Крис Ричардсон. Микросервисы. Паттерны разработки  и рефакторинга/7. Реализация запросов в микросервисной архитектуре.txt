В монолите одним запросом можно извлечь сразу много данных, но в к микросервисах бывает так, 
	что нужные для ответа данные раскиданы по разным сервисам. Это проблема. 

Есть два шаблона для написания запросов в микросервисной архитектуре :
- объединение API (API composition) - самый простой, юзаем всегда, когда можно. 
	За обращение к сервисам и объединение результатов отвечают клиенты
- разделение ответственности командных запросов (CQRS) - больше возможностей, но сложнее, требует наличия нескольких бд, 
	которые отвечают только за поддержку запросов.

Объединение API

API - композитор - реализует операцию запроса, обращаясь к сервисам-провайдерам, затем объединяет полученные результаты. 
	Это может быть клиент, напр, веб приложение, или сервис, напр, апи шлюз. 
Сервис-провайдер - сервис, которому принадлежат данные, возвращаемые запросом

Можно ли использовать этот шаблон, зависит от вида декомпозиции данных по сервисам. Иногда это неэффективно, 
	тк надо объединять большие объёмы данных в памяти. 

Проблемы объединения апи:
- надо решить, какой компонент будет выступать апт-композитором для операции запроса
- как написать эффективную логику агрегации?

Первый вариант апи-композитора - клиент, напр, веб приложение. Но это может быть плохо из-за брандмауэров или медленной сети. 
Второй вариант - апи шлюз, реализующий внешний апи приложения. Этот вариант подходит для запросов, которые входят в состав внешнего апи. 
Третий вариант - отдельный сервис. Этот вариант следуют использовать для апи внутри сервисов или для внешних запросов, 
	чья логика слишком сложная чтобы делать её частью апи шлюза. 

В идеале запросы к сервисам провайдерам должны распараллеливаться, если это возможно. 

Плюсы объединения апи:
- простота

Минусы:
- доп накладные расходы на объединение данных и запросы к разным сервисам
- риск снижения доступности, если есть запросы, зависящее от результатов других запросов и от большого количества вовлеченных сервисов. 
	В случае недоступности можно отдавать кэшированные данные или отдавать только часть данных клиенту
- нехватка транзакционного согласованности данных, тк запросы выполняются не в рамках одной транзакции. 
	Апи композитор должен решать проблемы рассогласования

CQRS (command query responsibility segregation) 

Реализует запрос, которому нужны данные из нескольких источников. Для поддержания представления, 
	реплицирующего данные из разных источников и доступного только для чтения, используют события. 

Задействует одно или несколько представлений бд, которые реализуют как минимум один запрос приложения

Существуют запросы, которые трудно реализовать объединением апи или просто невозможно, напр, 
	запрос истории заказов с фильтрацией по атрибутам, которые есть только у некоторых сервисов, а у других их нет. 
	Это можно решить объединением результатов в памяти на уровне апи композитора, но для этого надо извлекать и обрабатывать 
	большие объёмы лишних данных. Второй пример сложного запроса - геопространственный поиск, напр, 
	найти доступные рестораны на опред расстоянии от адреса доставки. Если не исп спец типы, а-ля location для postgres, 
	то запрос будет медленный и надо будет обрабатывать на сервисе. Либо хранить эти данные в другой базе с поддержкой 
	геопространственных запросов. Cqrs позволяет хранить копию данных с отложенный согласованностью.

CQRS решает все проблемы объединения апи,она разделяет команды и запросы. 
	Командные модули и модель данных реализуют операции создания, обновления и удаления, которые соответствуют post, 
	put и delete командам. Модули запросов и модель данных реализуют запросы, соответствующте команде get. 
	Сторона запросов синхронизирует свою модель данных с моделью данных командной стороны, подписываясь на события, 
	которые та публикует.

Иначе говоря, одна модель отвечает за основные запросы, а другая - за разные нетривиальные. 
	При изменении своих данных первая модель публикует события для второй, и та обновляет свою базу данных до актуального состояния. 
	Вторая модель проще первой, тк ей не нужно реализовывать бизнес правила. Таких моделей может быть несколько с разными бд, 
	подходящими для конкретных типов запросов, если это нужно. 

Можно реализовать отдельный сервис для специфических запросов со своей бд и подпиской на события обновления данных других сервисов, 
	применяя CQRS. 

Плюсы CQRS:
- возможность эффективной реализации запросов в микросервисной архитектуре - нет слияния данных
- возможность эффективной реализации разнородных запросов
- возможность выполнения запросов в приложении, основанное на порождении событий
- улучшенное разделение ответственности 

Минусы:
- более сложная архитектура
- отставание репликации за счёт обновления путем подписки на события. Можно указывать клиенту версию или реализовать там подписку 
	на обновление для получения актуальных данных 

Объединение апи нужно реализовывать везде, где можно, а cqrs только там, где необходимо 

При проектировании нужно:
- выбрать бд
- решить проблему поддержку идемпотентных и конкурентных обновлений
- решить, как клиент будет решать проблему отставание репликации

NoSql VS Sql:
- NoSql подходит зачастую для cqrs представлений.
- имеют более гибкую модель данных, лучшую производительность и масштабируемость.
- поддерживают ограниченный набор транзакций и запросов

Иногда нужно создать представление на основе имеющихся данных. Это можно сделать, используя архивированную последовательность событий. 
	Если событий становится слишком много, можно исп двухэтапный инкрементальный алгоритм - 
	на первом этапе периодически вычисляется снимок экземпляров каждого агрегата с учётом предыдущего снимка и событий 
	с момента его создания. На втором этапе с помощью снимков и любых последующих событий создаётся представление.