Две стратегии интеграционного тестирования:
- тестирование каждого адаптера сервиса, возможно, вместе с вспомогательными классами
- упрощение интеграционные тестов которые проверяют межсервисное взаимодействие путем использования контрактов - 
	конкретных примеров взаимодействия между сервисами 

Интеграционные тесты с сохранением - подготавливакт бд, создаём схему и приводим к известному состоянию, 
	выполняем операции с базой, проверяем, все ли верно, и очищаем базу путем, например, отката транзакций. 

При интеграционном тестировании нужно убедиться в том, что издатель и его подписчики согласовали канал сообщений и 
	структуру доменных сообщений. 

Все проверки осуществляются на уровне контрактов. 

Интеграционные и модульные тесты проверяют подведение отдельных частей сервиса. Интеграционные - то, 
	что сервисы могут взаимодействовать со своими клиентами и завииюсимостями, модульные проверяют корректность логики сервиса. 

Для проверки всего сервиса целиком используют компонентные тесты. Они находятся между интеграционные и сквозными. 
	Они полменяюи заглушками зависимости сервиса и симулируют их работы, а не разворачивают все зависимости, как в сквозные тестах

Приемочные тесты относятся к бизнес-аспектам программного компонента. Они описывают предпочтительное поведение, 
	которое наблюдают его клиенты, игнорируя внутреннюю реализацию. 

Gherkin - язык dsl для написания исполняемых спецификация, выполняется с помощью Cucumber - фреймворка автоматизации тестирования

Компонентный тест внутри процесса - внедряем зависимости, заставляя сервис обращаться к заглушкам и макетам. 
	Быстро и просто, но не тестируют развертываемый сервис. 

Компонентный тест за пределами процесса - упаковываем и разворачивам сервис, напр, чемюрез докер, используем реальную бд и брокер, 
	но поменяем заглушками все зависимости, которые являются сервисами приложения. Плюс - более широкое покрытие тестов, 
	минус - сложнее в написании, медленнее и не такие надёжные.

Сквозные тесты тестируют приложение целиком. Они медленные, ненадёжные и требуют много времени. 
	Требуют развёртывания большого количества сервисов и инфраструктуры. Лучше писать как можно меньше таких тестов, 
	и чтобы они были основаны на пользовательских сценариях работы с системой.

Сквозные тесты тоже можно писать на dsl языке с использованием gherkin и cucumber. 

Т.о. лучше всего использовать контракты (примеры сообщений) для тестирования взаимодействия между сервисами и проверять 
	адаптеры сервисов на соответствие контрактам, не запуская сами сервисы и их зависимости.

Для проверки поведения сервиса через апи нужны компонентные тесты с использованием заглушек вместо зависимостей.