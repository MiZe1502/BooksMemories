ACID - atomicity, consistency, isolation, durability

Вместо распределенных транзакция исп последовательности локальных транзакций на основе сообщений - повествования (саги). 
Но у них нет isolation свойства

У каждого сервиса своя бд - нужен механизм согласования между ними.

Традиционный подход - распределенные транзакции. Исп двухэтапную фиксацию,что гарантирует сохранение и откат всех изменений в транзакции. 
	Но их не поддерживают многие бд, напр, монго и кассандра, и многие брокеры, напр, rabbitMQ. 
	Это разновидность синхронный процессов - ухудшение доступности, для фиксации должны быть доступны все сервисы.

СА-теорема, Эрик Брюэр - система может обладать только двумя из трех свойств - согласованность, доступность и устойчивость к разделению.

В наши дни жертвуют согласованностью в пользу доступности.

Вместо распределенных транзакция исп последовательности локальных транзакций на основе сообщений - повествования (саги). 
	Но у них нет isolation свойства

У каждого сервиса своя бд - нужен механизм согласования между ними.

Традиционный подход - распределенные транзакции. Исп двухэтапную фиксацию,что гарантирует сохранение и откат всех изменений в транзакции. 
	Но их не поддерживают многие бд, напр, монго и кассандра, и многие брокеры, напр, rabbitMQ. 
	Это разновидность синхронный процессов - ухудшение доступности, для фиксации должны быть доступны все сервисы.

САP-теорема, Эрик Брюэр - система может обладать только двумя из трех свойств - согласованность, доступность и устойчивость к разделению.

В наши дни жертвуют согласованностью в пользу доступности.

Вместо распред транзакций исп саги. Они обеспечивают согласованность данных между сервисами, 
	используя последовательности локальных транзакций, которые координируются с помощью асинхронных.

Сервис публикует асинхронное сообщение после завершения локальной транзакции, 
	это инициирует следующий этап и даёт слабую связность, 
	и гарантирует полное выполнение повествования. 
	Минусы - недостаток изолированности и сложный откат изменений в случае ошибки. 
	Для отката каждого этапа используют компенсирующие транзакции, вып в обратном порядке по отношению к исходным.

Нужно все это координировать. Есть два метода:
- хореография - распределения принятия решений и упоряд действия между участниками повествования, которые общаются сообщениями
- оркестрация - централизация логики в виде класса оркестратора.

Хореография:
- публикация сообщения и обновление базы должны быть атомарными
- нужны Идентификатор соответствия, чтобы каждый сервис мог найти нужное сообщение и сопоставить с другими
- плюсы: простота, слабая связность
- минусы: сложнее для понимания, возникают циклические зависимости, существует риск жёсткого связывания

Хореография хорошо работает с простыми сагами

Оркестрация:
- внутри сервиса повествование управляет класс оркестратор, шлёт сообщения и читает их из брокера.
- конечный автомат - хорошая модель для оркестратора, набор состояний и переходов между ними, кот инициируются событиями
- на каждом этапе саги, основанной на оркестрации, какой-то из сервисов отновляет базу и публикует сообщение
- Плюсы: проще зависимости (нет циклов), меньше связность, проще бизнес логика и проще разделение ответственности
- Минусы: концентрация бизнес логики в оркестраторе, надо проектировать так, чтоб оркестратор отвечал только за последовательность действий, не содержа никакой логики

Лучше всего исп оркестрацию всегда, кроме самых простых случаев

В сагах недостаточная изолированность. Каждый этап фиксируется транзакцией, и другие сервисы могут считать данные до окончания саги, 
	и могут возникнуть аномалии - ситуации, когда параллельное выполнение транзакций даёт иные результаты, чем последовательное.

Для того, чтобы справиться с нехваткой изолированности, используют контрмеры.

Аномалии:
- потеря обновлений - повествование затирает изменения, внесённые другим, не читая их
- грязное чтение - транзакция или сага читают незавершенные обновления другого источника
- неповторяемое чтение - два разных этапа саги читают одни данные, но получают разные результаты, тк другая сага их изменила

Контрмеры:
- установка пендинг статусов, другие свои будут знать, что состояния обновляются в текущий момент - 
	семантическая блокировка на уровне приложения 
- коммутативные обновления - делать операции так, чтоб их можно было выполнить в любом порядке
- пессимистическое представление - перестановка этапов саги для минимизации бизнес рисков
- повторное чтение значения
- файл версий - ведение записей об обновлениях, чтобы можно было менять их местами
- по значению - использование бизнес рисков каждого запроса для динамического выбора механизма конкурентности

Транзакции, доступные для компенсации - транзакции, которые можно откатить с помощью компенсирующих
Поворотная транзакция - после которой отката нет, сага дойдёт до конца
Транзакции, доступные для повторения - те, что идут за поворотной. Всегда успешны

Семантическая блокировка - плюс - простота реализации, минус - усложнение клиента за счёт логики повторного вызова.