Транзакция - способ группировки приложением нескольких операций записи и чтения в одну логическую единицу. 

ACID - atomicity, consistency, isolation, durability - атомарность, согласованность, изоляция и сохраняемость - 
	обеспечиваемые транзакциями гарантии функциональной безопасности.

BASE - basically available, soft state, eventual consistency - как правило, доступна, гибкое состояние и конечная согласованность. 
	Так называются системы, которые не соответствуют ACID.

Атомарность - операции идут, как одно целое, атомарно, и отменяются все вместе.

Согласованность - данные должны быть согласованы по определённым утверждения, напр, дебет должен сходиться с кредитом и тд, 
	если до транзакции бд была в согласованом состоянии, то и после должна в нем оказаться.

Изоляция - конкурентные транзакции изолированы друг от друга и не мешают друг другу

Сохраняемость - обязательство бд не терять успешно записанных транзакций данных

Многообьектные транзакции - когда транзакция охватывает несколько таблиц, объектов, документов и тд. Напр, 
	одновременное обновление нескольких таблиц

Однообъектные транзакции - когда дело касается одного взаимодействия с данными.

В случае ошибки во время транзакции можно повторить отправку данных, но это не идеальное решение, 
	тк если причина ошибки в перегруженности системы, это только усугубит ситуацию.

Базовый уровень изоляции зачастую - чтение зафиксированных данных (read commited). Он гарантирует
- клиент при чтении видит только зафиксированные данные
- при записи можно перезаписать только зафиксированные данные

Исп по дефолту в оракле, постгресе, sql server и тд. Чаще всего базы исп блокировку строк для предотвращения грязной записи. 
	Блокировка держится вплоть до фиксации или прерывания транзакции. 
	Для предотвращения грязного чтения бд просто в течение транзакции возвращает старое значение, 
	которое было до изменения в течение транзакции.

Невоспроизводимое чтение - возникает когда, например, есть два связанных изменения данных, первое прошло и видны изменения, 
	а изменения во втором еще не видны (напр, при переводе денег со счета на счёт. В принципе, не проблема, 
	тк через пару секунд обновление произойдёт, но может оказать сильное влияние если в это время сделать 
	резервное копирование или аналитический запрос. Решение - Изоляция снимков состояния, 
	каждая транзакция читает данные из согласованного снимка состояния бд. Хорошо подходит для длинных запросов, 
	во время которых данные могут меняться.

В оракле этот уровень называется serializable, в постгресе - воспроизводимое чтение (repeatable read) 

Проблема потери обновлений - когда два юзера одновременно редактируют одни и те же данные, 
	второе изменение может затереть первое. Есть ряд решений:
- атомарные операции записи - обычно реализуются через эксклюзивное блокирование объекта при чтении, чтобы никакие другие транзакции 
	не могли его прочитать до фиксации изменений. 
- явная блокировка предназначенных для обновления объектов
- автоматическое обнаружение потери обновления, прерывание транзакции и повторное её исполнение с обновлёнными данными
- сравнение с обменом (compare-and-set) - обновление разрешено, только если значение не менялось с момента его прошлого чтения

Асимметрия записи - возникает при чтении двумя транзакциями одних и тех же объектов с последующим обновлением некоторых из них. 
	Атомарные операции не мюпомогвт, тк тут участвуют несколько объектов. Можно исп уровень сериализации или яанвб блокировку строк, 
	необходимых транзакции.

Сериализуемость - самый сильный уровень изоляции, гарантирует, что даже при конкурентном выполнении транзакций результат будет тем же, 
	как и в случае их последовательного выполнения.

Простейший способ избежать проблем с конкурентным доступом - выполнять транзакции последовательно в одном потоке выполнения. 
	Раньше считалось, что это менее производительно, но со временем концепция была пересмотрена из-за удешевления ОЗУ и того, 
	что oltp транзакции обычно короткие и выполняют небольшое кол-во операций чтения и записи. Исп в voltdb, redis, datomic.

В таких системах многооператорные транзакции запрещены, приложение заранее отправляет весь код транзакции в бд в виде хранимку, 
	чтобы не тратить время на обмен сетевыми сообщениями между приложением и бд в однопоточном режиме.

Последовательное выполнение транзакций упрощает контроль версий, но ограничивает пропускную способность бд по транзакциям скоростью 
	отдельного ядра процессора конкретной машины.

Двухфазная блокировка (2PL) - two phase locking - похоже на обычную, но усиливает требования. Допускает конкурентное чтение одного 
	объекта несколькими транзакциями при условии, что никто его не записывает. Но для записи требуется монопольный доступ. 
	Исп на уровне сериализуемых транзакций в mysql, sql server. Минус - плохая производительность.

Сериализуемая Изоляция списков состояния (ssi) - обеспечивает полную сериализуемость за счёт небольшого снижения производительности 
	по сравнению с обычной изоляцией снимков состояния. Это новый алгоритм, исп в постгресе с версии 9.1

Двухфазная блокировка - это пессимистический механизм управления доступом - если что-то может пойти не так (о чем говорит 
	удерживаемая другой транзакцией блокировка), то лучше подождать нормализации ситуации, прежде чем выполнять какие-то действия. 

Сериализуемая Изоляция снимков состояния - оптимистической метод. Вместо блокировки в случае потенциально опасных действий транзакции 
	просто продолжают выполняться в надежде, что все будет хорошо, а при фиксации база проверяет, 
	не случилось ли что-то плохое и тогда решает, повторять ли транзакцию или нет. Минус такого подхода - плохая производительность 
	при большой конкуренции.