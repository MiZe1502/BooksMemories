Частичный отказ - части системы не работают, а с другими все ок. 

В распределенных системах отказы зачастую недетерминированы. Необходимо встраивать в ПО механизмы обеспечения отказоустойчивости, 
	те строить надёжную систему из не надёжных компонентов 

Ошибки сети:
- запрос может быть потерян
- запрос может попасть в очередь и быть доставлен позднее
- отказ удалённого узла
- удалённый узел перестал отвечать на запросы 
- запрос обработан, но ответ потерян
- запрос обработан, но ответ будет доставлен позднее

При асинхронной работе сказать, почему мы не получили ответ на запрос, невозможно. Обычно исп таймаут, после которого считают, 
	что ответ уже и не будет получен. Можно попробовать повторить запрос несколько раз.

Таймаут обычно считают, как 2d + r, где d - максимальное время доставки запроса, r - максимальное время обработки запроса.

Если данные критичны к получению вовремя, но не обязательны к получению, то можно исп udp (voip, Skype, и тд)

В распределенной системе время - дело тонкое, тк часы на разных машинах должны быть по возможности синхронизированы. 
	Самый распространенный механизм - сетевой протокол времени, синхронизирующий часы компов с временем, 
	которое передаётся группой серверов.

Часы истинного времени (time of day clock) - возвращают текущее время и дату в соответствии с каким-то календарём

Монотонные часы (monotonic clock) - постоянно идут вперёд, абсолютные показания значения не имеют, исп для нахождения какой-то 
	разницы во времени на конкретной машине, тк на разных машинах значения этих часов различаются

Внутренние часы машин ненадежны - они расходятся с реальным временем и их нужно постоянно синхронизировать и подкручивать. 
	При использовании требвющего точных часов ПО нужно следить за расхождениями часов на всех машинах. 
	Если узел слишком расходится с другими, то он объявляется не рабочим и исключается из кластера. 
	Если нужно упорядочить события, лучше исп логические часы, в которых просто наращиваем счётчик, 
	а не учитываем время или кол-во прошедших секунд.

Узел сети ничего не знает наверняка - он может только делать предположения на основе получаемых или не получаемых по сети сообщений. 
	Узнать состояние другого узла узел может, только отправляя и получая сообщения. Если ответа нет, 
	то никак нельзя отличить неполадки на узле от сетевых проблем.

Узел не может полагаться только на свое мнение о ситуации, тк возможен случай, когда он получает все сообщения, 
	но его сообщения не уходят, и тогда другие узлы посчитают, что он мёртв. Многие распределенные алгоритмы основаны на кворуме, на решении большинства узлов. Такой подход позволяет снизить зависимость от любого одного конкретного узла. Обычно кворум - абсолютное большинство из более, чем половины узлов, тк тогда не будет конфликтов.

Нужно учитывать кейс, когда узел, например, был ведущим, но затем кворум признал его ведомым или мёртвым, 
	но он продолжает слать сообщения другим узлам с позиции ведущего.

Для защиты доступа к ресурсу можно использовать ограждающий маркер - счётчик, который наращивает при каждом предоставлении блокировки 
	отдельным сервисом блокировок, и при каждой отправке запроса на запись клиент включает в запрос этот маркер. 
	Тогда можно избежать ситуации, когда один узел взял в работу какой-то ресурс, затем приостановил работу, например, 
	на сборку мусора, в это время другой узел изменил ресурс, а затем первый узел продолжил свою работу 
	и попытался записать свои изменения.

Византийский сбой - когда узел отправляет заведомо неверные данные, не связанные с какими то задержками обработки и тд, 
	те ведёт себя не добропорядочно. По дефолту мы считаем, что в наших системах нет Византийских сбоев, 
	если только к узлу не получил доступ злоумышленник.

Модель системы - абстракция, описывающая принимаемые алгоритмом допущения.

Системные модели:
- синхронная - ограниченность сетевых задержек, пауз процессов и расхождения часов, но нет идеальной синхронизации часов. 
	Есть фиксированная верхняя граница. Нереалистична.
- частично синхронная - большую часть времени система ведёт себя, как синхронная, но иногда выходит за рамки заданой длительности задержек,
	 пауз и расхождения часов.
- асинхронная - нет каких либо временных допущений.

Нужно учитывать откат узлов. Модели:
- отказ - остановка - сбой узла может быть только фатальным
- отказ - восстановление - сбой узла может быть в любой момент, но через некоторое время узел вернётся в строй. Данные не теряются
- Византийские (произвольные) сбои - узлы делают все, что угодно, включая обман других узлов и тд.

Свойства алгоритмов:
- уникальность - никакие едва запроса ограждающего маркера не приводят к возврату одного значения
- монотонное возрастанию значений
- доступность - узел, с которым не произошёл фатальный сбой, запросивший ограждающий маркер, в конце концов получит ответ на свой запрос.

Алгоритм корректен, если удовл этим свойствам, но это не значит, что его реализация в конкретной системе всегда будет вести себя корректно.