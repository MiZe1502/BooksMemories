Большинство реплицированных бд имеют по меньшей мере конечную согласованность, те если прекратить записывать данные, 
	то рвёт или подлро все запросы на чтение вернут одно и то же значение. Это слабая гарантия, тк нет данных о том, 
	когда именно реплики сойдутся. Таким образом семантика работы с бд становится неочевидной для разработчиков приложений. 
	Более сильные модели согласованности являются более предпочтительными.

Линеаризуемость - самая сильная модель согласованности общего назначения. Система выглядит так, как если бы в ней была только одна 
	копия данных и все операции с ней были атомарными. Таким образом приложению не о чем беспокоиться при запросах к бд. 
	Если для какого-то клиента система вернула ответ с новыми данными, то для всех остальных с этого момента она должна 
	возвращать тот же ответ, даже если репликация ещё не закончилась. 

В системах с одним ведущим узлом такой узел должен быть единственным. Один из способов его выбора - каждый узел пытается 
	получить блокировку, и тот, которому удалось, становится ведущим. Но блокировка должна быть линеаризуемой. 
	Часто исп координационные сервисы zookeeper и etcd, в которых реализованы консенсусные алгоритмы для отказоустойчивой 
	реализации линеаризуемых операций. 

Репликация с одним ведущим узлом является потенциально линеаризуемой, с несколькими узлами - нереализуемой, 
	без ведущего узла - не всегда линеаризуемой. 

Если приложение требует линеаризуемости, а некоторые реплики не имеют доступа к другим репликам из-за сетевых проблем, 
	то эти реплики не могут обрабатывать запросы, пока они отключены, они должны либо ждать, пока вернётся связь, 
	либо возвращать ошибку.

Если приложение не требует линеаризуемости, то оно может быть написано таким образом, чтобы каждая реплика могла 
	обрабатывать запросы независимо, даже будучи отключенной от других реплик. Такое приложение может оставаться доступным 
	даже в случае проблем с сетью, но его поведение нереализуемо

Теорема САР - приложение, не требующее линеаризуемости, более устойчиво к неполадкам в сети.

Линеаризуемость - медленная, и потому многие распределенные бд её не реализуют.

В линеаризуемой системе имеет место полное упорядочивание операций.

События упорядочены при условии наличия между ними причинно следственной связи, но они несравнимы, если конкурентны.

В линеаризуемом хранилище не должно быть конкурентных операций, должна быть временная шкала, относительно которой упорядочены все операции.

Любая линеаризуемая система сохранит причинно следственные зависимости и даже не придётся ничего делать дополнительно, 
	но за это придётся платить производительностью и доступностью. Однако существуют другие методы сохранения 
	причинно-следственной связи.

Нужно знать, какая операция произошла раньше, а какая - позже. Можно использовать порядковые номера или временные метки, 
	опираясь на логические часы. Это обеспечивает полную упорядоченность - каждая операция имеет уникальный номер, 
	и эти номера всегда можно сравнить. В бд с одним ведущим узлом этот узел просто увеличивает счетчик для каждой 
	операции в журнале репликации, и если ведомый узел применяет из в том порядке, в котором они появляются в журнале, 
	то его состояние всегда причинно упорядоченное

Если нет ведущего узла:
- каждый узел генерирует собственный независимый набор порядковых номеров
- можно прикреплять к каждой операции временную метку от часов времени суток
- можно предварительно поделить между узлами диапазоны порядковых номеров.

Это быстрее, чем генерация номеров на ведущем узле, но во всех трех вариантах может возникнуть рассинхрон, 
	те эти порядковые номера не совместимы с причинностью. На практике исп метод временной метки Лампорта. 
	Каждый узел хранит уникальный айдишник и счётчик количества обработанных им операций. 
	Временная метка Лампорта - это пара "счётчик, айдишник". Благодаря айдишнику узла каждая метка времени становится уникальной. 
	Каждый узел отслеживает макс значение счётчика, которое ему встречалось, и обновляет свой счётчик до него в случае отставания.

Но иногда этого мало и нужно знать, когда началась вся последовательность операций. Эта идея носит название рассылка общей 
	последовательности. Обычно она описывается, как протокол обмена между узлами, удовл требованиям надёжной и полностью 
	упорядоченной доставки.

Узлы должны быть согласованы в следующих ситуациях:
- выбор ведущего узла
- атомарная фиксация

Двухфазная фиксация (2PC) - алгоритм для атомарной фиксации транзакций в случае нескольких узлов, гарантирует, 
	что транзакцию либо зафиксировали все узлы, либо прервали её. Здесь исп координатор, или диспетчер транзакций, 
	который отслеживает ответы участников транзакции. Если все ответили да, то на втором этапе координатор фиксирует транзакцию. 
	Если есть хоть один нет, то на втором этапе координатор отправляет узлам запрос прерывания. 
	Координатор пишет свое решение в журнал транзакций на диск на случай, если он выйдет из строя в момент фиксации и нужно 
	будет до обработать транзакции после восстановления, узлам же в этот момент остаётся только ждать.

Распределенные транзакции с двухфазной фиксацией имеют плохую производительность, вызывают операционные проблемы, 
	но гарантируют безопасность.