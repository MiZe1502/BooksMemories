Журнал - файл, предназначенный для добавления данных в его конец

Индекс - дополнительная структура, производная от основных данных, дополнительно хранит метаданные, облегчающие поиск данных. 
	Любые индексы замедляют запись, тк индекс нужно обновлять. 

Хеш-индексы - храним в ОЗУ хэш карту, каждому ключу соответствует смещение в файле данных. 
	При добавлении в файл пары ключ-значение происходит обновление хэш карты для отражения относительного адреса новых данных. 
	Это упрощённый подход, но так работает bitcask в СУБД riak. Хорошо подходит для случаев частного обновления всех ключей. 

Минусы - хэш таблица должна поместиться в ОЗУ, так что если много ключей, то не подходит. Хранить её на диске - будет медленно. 
	Запросы по диапазоны неэффективны

Если отсортировать наши файлы с парами ключ-значение по ключу, получим отсортированные строковые таблицы (sorted string tables, sstables). 
	Каждый ключ должен встречаться один раз в объединённом файле сегмента.

Плюсы:
- объединение сегментов происходит просто и эффективно, похоже на mergesort
- не нужно хранить индекс в ОЗУ, тк нам известно смещение для ключей, благодаря сортировке. 
	Индекс в ОЗУ для некоторых ключей все ещё нужен, но он может быть разреженным
- можно исп сжатие для экономии места

При постеплении записи добавляем её в сбалансированную структуру данных, хранящуюся в памяти. 
	При превышении опред размера, записвваем её на диск в виде файла ss таблиц. 
	При запросе сперва ищем ключ в той структуре, что в ОЗУ, затем в последней, записанной на диск, затем в предпоследней и тд. 
	Такой подход исп в leveldb и rocksdb. Аналогичные подсистемы есть в cassandra и hbase. 
	Изначально эта индексная структура была создана под названием журналированного дерева слияния (log structured merge tree, lsm-tree). 

Lsm дерево работает медленно при поиске отсутствующих в бд ключей, приходится просматривать все структуры вплоть до самой старой. 
	Для оптимизации исп фильтры Блума, которые позволяют определить, есть ли ключ в базе. 

B-дерево - наиболее широко распространённая индексная структура. Хранят пары ключ-значение в отсортированном по ключу виде, 
	что даёт эффективный поиск по ключу и запросы по диапазонам. В-деревья разбивают базу на блоки или страницы фиксированной размера,
	обычно 4кб,и читают или записывают по одной странице за раз, это хорошо для нижележащего аппаратного обеспечения. 
	Страницы имею свои адреса и могут ссылаться на другие по ним, аналогично указателям, и по ним создаётся дерево страниц. 
	Одна из страниц становится корнем, от неё идёт поиск по ключу в индексе. В корневой странице есть несколько ключей и ссылок 
	на дочерние страницы, каждая из которых отвечает за свой непрерывный диапазон ключей. 
	В итоге при поиске мы доходим до страницы, которая содержит значение для искомого ключа.

При обновлении значения по ключу ищем это значение, обновляем и записываем страницу на диск. 
	При добавлении нового ключа нужно найти страницу с диапазоном, в который попадает этот ключ и добавить туда его. 
	Если не хватает места, то страница разбивается на две полупустые страницы, а родительская обновляется, чтобы учесть это разбиение. 
	Дерево остаётся сбалансированный, глубина О(logn). Единственная проблема - удаление ключа. 
	При сохранении сбалансированности это нетривиальная задача.

При разбиение страницы на две новых может возникнуть ситуация, что записана только часть страниц, и произошёл сбой. 
	Тогда индекс будет повреждён и может возникнуть, напр, бесхозная (orphan) страница. 
	Для предотвращения этого обычно исп журнал упраждающей записи (writeahead log, wal). 
	Всё модификации деревьев записываются в него до применения и в случае чего их можно откатить.

Для, конкурентного доступа исп защелки (latch) - облегчённый вариант блокировок для защиты дерева.

Есть ряд модификаций:
- вместо wal используют копирование при записи с созданием новых родительских таблиц.
- сохраняется не весь ключ, а только его сокращённый вариант. Это экономит место.
- исп дополнительные указатели на страницы того же уровня справа и слева, это позволяет не возвращаться при просмотре ключей к 
	родительской странице

Lsm деревья как правило быстрее при записи, b деревья при чтении, но часто это зависит от нюансов конкретной нагрузки

Вторичные индексы - создаются из индекса типа ключ-значение, отличие в том, что ключи не уникальны.

Кластеризованный индекс - проиндексированная строка хранится непосредственно в индексе.

Сцепленный индекс - объединяет несколько полей в один ключ, присоединяя один столбец к другому

Удешевление ОЗУ привело к созданию размещаемых в оперативной памяти баз данных, напр, voltdb, memsql, Oracle timesten.

Обработка транзакций в реальном времени, online transaction processing, oltp - транзакции применяемые для работы с данными в 
	интерактивных приложениях, зачастую где какие-то данные находятся, обновляются и тд

Аналитическая обработка данных в реальном времени, online analytical processing, olap - паттерн применения запросов в бд для составления 
	отчётов для бизнес аналитики, используемых для оптимизации коммерческих решений.

Склад данных, data warehouse - отдельная бд для аналитики, на которой выполняются тяжёлые olap операции, 
	которые не должны аффектить продовые базы и транзакции, которые на них выполняются. 
	Данные перемещается в склад в процессе etl - extract - transform - load, извлечение - преобразование - загрузка

Зачастую используются в крупных компаниях и оптимизируются для аналитических запросов.

В основе складов данных лежат схемы звезда и снежинка. Звезда - моделирование с помощью измерений, dimensional modeling, 
	в центре таблица фактов, и от неё идут ссылки по внешним ключам на ссылочные таблицы - измерения. 
	Снежинка - то же самое, но измерения разбиваются на подизмерения.

Для оптимизации запросов в хранилищах данных хранятся не по строкам, а по столбцам, т.о. можно грузить с диска только те столбцы, 
	которые нужны для запроса. Так же можно применять битовые карты для кодирования содержащихся в столбцах значений. 
	Порядок хранения строк не имеет значения, проще всего хранить их в порядок вставки, 
	тк это будет означать просто дописывание новой строки при её появлении. 

Узкое место аналитических бд - перемещение данных с диска в память.

Часто исп материализованные представления - физические копии результатов запросов, записанные на диск, 
	и из можно использовать в дальнейшем, чтобы снова не гонять запросы. Частный случай - олап кубы, сетки сводных показателей, 
	сгруппированных по различным измерениям. Минус - менее гибко, чем запросы. Плюс - быстрее, тк данные заранее подсчитаны.