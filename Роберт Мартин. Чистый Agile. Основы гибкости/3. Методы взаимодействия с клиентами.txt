- планирование - бьём проект на более мелкие части и оцениваем по частям, по сути, рекурсивно. По определению оценка времени не точна. 
- небольшие и частые релизы
- приемочные тестирование 
- "одна команда" 

Трехвариантный анализ - берем лучший случай, допустимый и худший с различными вероятностями. 
	Мат метод, связанный с Трехвариантным анализом - PERT. Хорошо подходит для долгосрочной оценки, 
	но слишком неточен для повседневного управления 

Единицы сложности историй - даёт достоверность и точность благодаря коротким циклам обратной связи, благодаря им уточняется оценка. 

Пользовательская история - это сокращённое описание функции программы с тз пользователя. 

Сперва они описываются в первом приближении, очень общо, без подробностей. Затем берётся средняя история 
	и оценивается её реализация в пунктах. Теперь она становится эталоном, и оценка остальных историй будет базироваться на ней. 
	Эта оценка показывает, сколько усилий нужно затратить на реализацию. Сперва она расплывчата, 
	но при многократном выполнении задания сводится на нет. 

Затем планируется итерация, исходя из того, сколько можно за неё выполнить. Приоритетные и несложные истории делают первыми, 
	приоритетные, но более сложные откладывают на потом. Не приоритетные и несложные можно сделать за день, а те, 
	что не ценны, да ещё и сложны, можно забыть. Делается расчёт окупаемости инвестиций (ROI) 

В середине итерации делаем промежуточную проверку, сколько выполнили и сколько осталось. 

Итерации не бывают провальными, даже если сделали меньше, чем планировали. Цель - собрать данные, а не написать код. 
	Теперь мы знаем, сколько выполняем за итерацию, и на следующую запланируем такое количество, а не большее. 

Истории должны соответствовать атрибута качества (INVEST):
- Независимость (independent) - независимы друг от друга. 
- Обсуждаемость (negotiable) - клиенты и разрабы обсуждают подробности историй 
- Ценность (valuable) - клиенты хотят видеть, что у истории есть измеримая ценность для бизнеса, 
	рефакторинг и архитектура - это не история. 
- Поддаваемость оценке (estimable) - история должна быть достаточно конкретной, чтобы можно было сделать прогноз 
- Компактность (small) - история должна быть небольшой, чтобы 1-2 разраба могли справиться с ней за одну итерацию 
- Тестируемость (testable) - клиенты должны чётко назвать тесты, позволяющие подтвердить, что история выполнена

Есть много способов оценки историй. Напр, оценка на пальцах - все читают истории и взакрытую выбирают на пальцах, насколько они сложны. 
	Затем одновременно показывают. Если есть разногласия - повторяем до победного. Другой вариант - по размерам одежды. 
	Третий - покер планирования, похожий способ, но нужны карты. 

При слиянии историй просто складываем единицы сложностей. При разбиении нужно соблюдать описанные выше правила. 

Костыль - метаистория для оценки истории.

Каждая итерация заканчивается демкой. По итогам итерации на графике скорости сгорания задач отмечаем только задачи, 
	прошедшие приемочные тестирование. 

Рост скорости - не всегда правдив, может он идёт из-за обесценивания единиц сложности задач. 

Снижение скорости - скорее всего снижается качество кода, мало рефакторинга, и становится сложно реализовывать фичи. 
	Из-за падения скорости увеличивается давление на команду, это ведёт к обесценивания единиц сложности 

Разработка через поведение - требования к программе указываются на формальном языке, основанном на языке сценариев, напр, 
	с ключевыми словами дано, когда и тогда. Получается, что не нужно писать непосредственно тесты, 
	но в то же время технические требования достаточно формализованы и точны. Эти формальные тесты пишутся клиентами. 
	Затем разработчики автоматизируют эти тесты. 

Одна команда - сидим в одном помещении, возникает синергетический эффект.